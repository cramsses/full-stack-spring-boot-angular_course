**********************  SECTIONS SEVEN **********************
BASIC AUTHENTICATION WITH SPRING BOOT

----------------------------------------------------------------------------------------
Step 71 - Overview of Security with Basic Auth and JWT

	JWT JSON Web Token

----------------------------------------------------------------------------------------
Step 72 - Setting up Spring Security

	Add dependency for security in pom.xml:
	
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

	Adding this dependency spring in automathic redirect to login
		/login
		--> FORM BASE AUTHENTICATION
			defaults
			user: user
			pass: generated at start
				Using generated security password: f076b499-5de1-48ea-80ef-6a0336622ab0
		--> A session cookie is creaeted
		
		
	Header Authentication in RestClient
		Add authorization header
	
	Basic authorization header as part og the request

----------------------------------------------------------------------------------------
Step 73 - Configure standard userid and password

	In application.properties
		spring.security.user.name = user
		spring.security.user.password = password



----------------------------------------------------------------------------------------
Step 74 - Enhancing Angular Welcome Data Service to use Basic Authentication

	Block by CORS cause the Service has security implemented

	Add header in frontend angula data service
	
		executeHelloWorldBeanServiceWithPath(name) {
			//console.log('Executing Hello World Bean Service');
			let basicAuthHeaderString = this.createBasicAuthenticationHttpHeader();
			let headers = new HttpHeaders({
				Authorization: basicAuthHeaderString
			  })
			return this.http.get<HelloWorldBean>(`http://localhost:8080/hello-world-bean/path-variable/${name}`,
			{headers});
		  }

		createBasicAuthenticationHttpHeader() {
			let username = 'ramsses';
			let password = 'dummy';

			let basicAuthHeaderString = 'Basic ' + window.btoa(username + ':' + password);
			return basicAuthHeaderString;
		  }


	OPTIONS Method request Error

----------------------------------------------------------------------------------------
Step 75 - Configure Spring Security to disable CSRF and enable OPTION Requests

	In Angular Fronend:
		The request First send OPTIONS Requests
	
	In Spring App
		WebSecurityConfigurerAdapter is the default conf
			Override config(HttpSecurity http) method 
		
		Create class: 
			In package com.sohe.rest.webservices.restfulwebservices.basic.auth
			SpringSecurityConfigurationBasicAuth taht extends from WSCA
		
	
		@Configuration
		@EnableWebSecurity
		public class SpringSecurityConfigurationBasicAuth extends WebSecurityConfigurerAdapter {
			
			@Override
			protected void configure(HttpSecurity http) throws Exception {
				
				http
				.csrf().disable()
				.authorizeRequests()
				.antMatchers(HttpMethod.OPTIONS,"/**").permitAll()
				.anyRequest().authenticated()
				.and()
				//.formLogin().and()
				.httpBasic();
			}

		}

----------------------------------------------------------------------------------------
Step 76 - Creating Angular HttpInterceptor to add Basic Auth Header


	HttpInterceptors fot vonfigure a header for every request

		Create service:
			ng generate service service/http/HttpInterceptorBasicAuth

	
		export class HttpInterceptorBasicAuthService implements HttpInterceptor {

		  constructor() { }

		  intercept(request: HttpRequest<any>, next: HttpHandler) {
			let username = 'ramsses';
			let password = 'dummy';
			let basicAuthHeaderString = 'Basic ' + window.btoa(username + ':' + password);

			request = request.clone({
			  setHeaders: {
				Authorization: basicAuthHeaderString
				}
			  })

			return next.handle(request);

		  }
		}
	

----------------------------------------------------------------------------------------
Step 77 - Configure HttpInterceptor as Provider in App Module

	In app.module.ts:
		
		providers: [
			{
				provide: HTTP_INTERCEPTORS, 
				useClass:HttpInterceptorBasicAuthService, 
				multi:true
			}
		  ]
	

			
----------------------------------------------------------------------------------------
Step 78 - Create Basic Authentication RESTful Service in Spring Boot

	In package of basic.auth
		Create bean and controller
		
	


----------------------------------------------------------------------------------------
Step 79 - Create Angular Basic Authentication Service

	In angular create a basic auth service. 
	Copy from hardcoded service and add call to RESTful Service in Spring Boot
	
	
----------------------------------------------------------------------------------------
Step 80 - Connect Login Page to Basic Authentication Service - Part 1

	basic-authentication.service.ts in angular pipe for succedd response:
	
	  executeAuthenticationService(username, password) {
		let basicAuthHeaderString = 'Basic ' + window.btoa(username + ':' + password);
		let headers = new HttpHeaders({
			Authorization: basicAuthHeaderString
		  })
		
		  return this.http.get<AuthenticationBean>(`http://localhost:8080/basicauth`,
		{headers}).pipe(
		  map(
			data=>{
			  sessionStorage.setItem('authenticateUser',username);
			  console.log('Request succeed');
			  return data;
			}
		  )
		)
		
	  }
	  
	  
	 in login.component.ts :
	 
	 handleBasicAuthLogin() {
		console.log('executing sertvice....')
		//if(this.username==="ramsses" && this.password==="dummy"){
		this.basicAuthenticationService.executeAuthenticationService(this.username, this.password)
		  .subscribe(
			data => {
			  console.log(data);
			  
			  this.router.navigate(['welcome', this.username]);
			  this.invalidLogin = false;
			  
			},
			error => {
			  console.log(error);
			  this.invalidLogin = true

			}
		  )

	  }


----------------------------------------------------------------------------------------
Step 81 - Connect Login Page to Basic Authentication Service - Part 2

	Add y login.html
		<button (click)=handleBasicAuthLogin() class="btn btn-success">Login</button>

	Disable intercpetor becasue is hardcoded
		Test login
----------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------



