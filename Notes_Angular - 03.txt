**********************  SECTIONS THREE  **********************

IDE Visual Studio Code

File	->Preferences	->Color Theme

For importing a project:
	- Open folder
	- Just drag and drop the folder




----------------------------------------------------------------------------------------
Step 06 - Exploring CLI Commands

IN angular.json are defined the commands

ng lint --> Check standards rules in code
			In "tslint.json" file are defied te rules
			
ng build --> Create "dsitr" folder

bg test --> Run unit test (Framework Jasmine run with Karma)
			Files:
				"\karma.conf.js"
				"src\app\app.component.spec.ts"
				
				
ng e2e -->	End to end test with Selenium 
			In folder "e2e"
			protector is use and 
----------------------------------------------------------------------------------------
Step 07 - Exploring Angular CLI Project Structure

src/app 	-->	Components and modules rest here

src/assets 	-->	Images

src/enviroments --> Configurations

files:		
	tsconfig.json --> typesript to javascript
	README.md --> Documentation
	package.json --> frameworks and tools specification
	polyfills.ts --> browser compatibiliies
	style.css --> Global Styles
	test.ts --> For ng test command
	When launch are loaded up:
		main.ts and index.html
	

node_modules --> Where all packages are 

----------------------------------------------------------------------------------------
Step 08 - Introduction to Angular Components - Basics

Angular Components
	Usually a page is make of a set of components, example:
		- Menu Component
		- List Todos Component
		- Footer Component
		
	Component
		- Template (.component.html)
		- Style (.component.css)
		- Code (.component.ts)
	
	Decorator similar to Java Annottion
	With a decorator its indicated ths something is a component
		@Component
		
	Example
		import { Component } from '@angular/core';

		@Component({
		  selector: 'app-root',
		  templateUrl: './app.component.html',
		  styleUrls: ['./app.component.css']
		})

		export class AppComponent {
		  title = 'todo';
		}
		
		
	Imprtant concepts:
	- Component
	- Decorator
	- Interpoltaion
	- Data binding

----------------------------------------------------------------------------------------
Step 09 - Introduction to Angular Components - Playing with AppComponent

PLay Around with the component
	The scope of the component element are just the component itself
	
	Work the basics of:
		- Template (.component.html)
		- Style (.component.css)
		- Code (.component.ts)

----------------------------------------------------------------------------------------
Step 10 - Generating Welcome Component with ng generate

Note: Syntax of TS looks similar to Java class


Create a new component:
- Does not need to stops ng serve
- ng generate in the project folder, there is no rollback:
	ng generate component [nombre]
	ng generate component welcome
	
	This create 4 files and update 1
		CREATE src/app/welcome/welcome.component.html (22 bytes)
		CREATE src/app/welcome/welcome.component.spec.ts (633 bytes)
		CREATE src/app/welcome/welcome.component.ts (279 bytes)
		CREATE src/app/welcome/welcome.component.css (0 bytes)
		UPDATE src/app/app.module.ts (479 bytes)


	Every ***Angular Component*** (@Component) has to be associated with an ***Angular Module*** (@NgModule)
	
	The TS file created in its class implements OnInit
	
	
----------------------------------------------------------------------------------------
Step 11 - Language Variations With an Example - Java, JavaScript and TypeScript

In JavaScript one per module and one module per file.
Module is how organizes classes in JavaScript


	Package vs File

	Scope of a class in TS: export and import keywords
	
	- constructor		--> contructor(){}
	- methods			-->	ngOnInit(): void {}
	- member variables	--> message : string = 'Welcomeeeeee'
	

----------------------------------------------------------------------------------------
Step 12 - Generating and Setting up Login Component

ng generate component login
Add inputs in components

----------------------------------------------------------------------------------------
Step 13 - Understanding Event Binding - Adding click event on Login Page


Data binding 
	Interpolation {{}}
	Event binding  (event)=whatShouldYouDo()


----------------------------------------------------------------------------------------
Step 14 - Using ngModel with 2 Way Data Binding in Login Page

Data binding
	banana-in-a-boat-approach [()]
	[(ngModel)] = attribute or member class  --> [(ngModel)]="username"

In app.module.ts add
	import { FormsModule } from '@angular/forms';
In imports of app.module.ts add
	FormsModule

This is named TWO-DATA-Binding


----------------------------------------------------------------------------------------
Step 15 - Quick Review of Data Binding Approache

1.- Interpolation --> Data from component showing in view
2.- Event Binding --> Bind event from evet to mehtod in component
3.- Two way data binding --> ngModel for 2-way data binding map

Angular Directive
	ngModel


----------------------------------------------------------------------------------------
Step 16 - Adding Hardcoded Authentication to Logic Component - ngIf directive

angular attribute 
	*ngIf

----------------------------------------------------------------------------------------
Step 17 - Implementing Routes for Login, Welcome and Error Componetns

Routing, whitng serve there is a quertion ig the project needs routing:
	- creates a file named app-routing.module.ts
	- In Routes add the paths objects
	
	For example of routing:
		const routes: Routes = [
		  {path:'', component: LoginComponent},
		  {path:'login', component: LoginComponent},
		  {path:'welcome', component: WelcomeComponent},
		  {path:'**', component: ErrorComponent}
		];
	

----------------------------------------------------------------------------------------
Step 18 - Implementing Routing from Login to Welcome Component

	NOte: In Angular DI is a built-in feature, just declare in cosntructor:
		constructor(router: Router) { }
		
	Injection class Router and with navigate() method redirects path

----------------------------------------------------------------------------------------
Step 19 - Adding Route Parameter for Welcome Component

	- Add paramter to path in routing
		{path:'welcome/:name', component: WelcomeComponent}
	- In componet accept that parameter
		constructor(private route:ActivatedRoute) { }
		
	- If redirects from other component add parameter
		this.router.navigate(['welcome',this.username])
		

----------------------------------------------------------------------------------------
Step 20 - Create List Todos Component with ng generate

	Directive *ngFor:
	
		<tr *ngFor = "let todo of todos">
            <td>{{todo.id}}</td>
            <td>{{todo.description}}</td>
        </tr>

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------





















