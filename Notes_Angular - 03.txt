**********************  SECTIONS THREE  **********************

IDE Visual Studio Code

File	->Preferences	->Color Theme

For importing a project:
	- Open folder
	- Just drag and drop the folder




----------------------------------------------------------------------------------------
Step 06 - Exploring CLI Commands

IN angular.json are defined the commands

ng lint --> Check standards rules in code
			In "tslint.json" file are defied te rules
			
ng build --> Create "dsitr" folder

bg test --> Run unit test (Framework Jasmine run with Karma)
			Files:
				"\karma.conf.js"
				"src\app\app.component.spec.ts"
				
				
ng e2e -->	End to end test with Selenium 
			In folder "e2e"
			protector is use and 
----------------------------------------------------------------------------------------
Step 07 - Exploring Angular CLI Project Structure

src/app 	-->	Components and modules rest here

src/assets 	-->	Images

src/enviroments --> Configurations

files:		
	tsconfig.json --> typesript to javascript
	README.md --> Documentation
	package.json --> frameworks and tools specification
	polyfills.ts --> browser compatibiliies
	style.css --> Global Styles
	test.ts --> For ng test command
	When launch are loaded up:
		main.ts and index.html
	

node_modules --> Where all packages are 

----------------------------------------------------------------------------------------
Step 08 - Introduction to Angular Components - Basics

Angular Components
	Usually a page is make of a set of components, example:
		- Menu Component
		- List Todos Component
		- Footer Component
		
	Component
		- Template (.component.html)
		- Style (.component.css)
		- Code (.component.ts)
	
	Decorator similar to Java Annottion
	With a decorator its indicated ths something is a component
		@Component
		
	Example
		import { Component } from '@angular/core';

		@Component({
		  selector: 'app-root',
		  templateUrl: './app.component.html',
		  styleUrls: ['./app.component.css']
		})

		export class AppComponent {
		  title = 'todo';
		}
		
		
	Imprtant concepts:
	- Component
	- Decorator
	- Interpoltaion
	- Data binding

----------------------------------------------------------------------------------------
Step 09 - Introduction to Angular Components - Playing with AppComponent

PLay Around with the component
	The scope of the component element are just the component itself
	
	Work the basics of:
		- Template (.component.html)
		- Style (.component.css)
		- Code (.component.ts)

----------------------------------------------------------------------------------------
Step 10 - Generating Welcome Component with ng generate

Note: Syntax of TS looks similar to Java class


Create a new component:
- Does not need to stops ng serve
- ng generate in the project folder, there is no rollback:
	ng generate component [nombre]
	ng generate component welcome
	
	This create 4 files and update 1
		CREATE src/app/welcome/welcome.component.html (22 bytes)
		CREATE src/app/welcome/welcome.component.spec.ts (633 bytes)
		CREATE src/app/welcome/welcome.component.ts (279 bytes)
		CREATE src/app/welcome/welcome.component.css (0 bytes)
		UPDATE src/app/app.module.ts (479 bytes)


	Every ***Angular Component*** (@Component) has to be associated with an ***Angular Module*** (@NgModule)
	
	The TS file created in its class implements OnInit
	
	
----------------------------------------------------------------------------------------
Step 11 - Language Variations With an Example - Java, JavaScript and TypeScript

In JavaScript one per module and one module per file.
Module is how organizes classes in JavaScript


	Package vs File

	Scope of a class in TS: export and import keywords
	
	- constructor		--> contructor(){}
	- methods			-->	ngOnInit(): void {}
	- member variables	--> message : string = 'Welcomeeeeee'
	

----------------------------------------------------------------------------------------
Step 12 - Generating and Setting up Login Component

ng generate component login
Add inputs in components

----------------------------------------------------------------------------------------
Step 13 - Understanding Event Binding - Adding click event on Login Page


Data binding 
	Interpolation {{}}
	Event binding  (event)=whatShouldYouDo()


----------------------------------------------------------------------------------------
Step 14 - Using ngModel with 2 Way Data Binding in Login Page

Data binding
	banana-in-a-boat-approach [()]
	[(ngModel)] = attribute or member class  --> [(ngModel)]="username"

In app.module.ts add
	import { FormsModule } from '@angular/forms';
In imports of app.module.ts add
	FormsModule

This is named TWO-DATA-Binding


----------------------------------------------------------------------------------------
Step 15 - Quick Review of Data Binding Approache

1.- Interpolation --> Data from component showing in view
2.- Event Binding --> Bind event from evet to mehtod in component
3.- Two way data binding --> ngModel for 2-way data binding map

Angular Directive
	ngModel


----------------------------------------------------------------------------------------
Step 16 - Adding Hardcoded Authentication to Logic Component - ngIf directive

angular attribute 
	*ngIf

----------------------------------------------------------------------------------------
Step 17 - Implementing Routes for Login, Welcome and Error Componetns

Routing, whitng serve there is a quertion ig the project needs routing:
	- creates a file named app-routing.module.ts
	- In Routes add the paths objects
	
	For example of routing:
		const routes: Routes = [
		  {path:'', component: LoginComponent},
		  {path:'login', component: LoginComponent},
		  {path:'welcome', component: WelcomeComponent},
		  {path:'**', component: ErrorComponent}
		];
	

----------------------------------------------------------------------------------------
Step 18 - Implementing Routing from Login to Welcome Component

	NOte: In Angular DI is a built-in feature, just declare in cosntructor:
		constructor(router: Router) { }
		
	Injection class Router and with navigate() method redirects path

----------------------------------------------------------------------------------------
Step 19 - Adding Route Parameter for Welcome Component

	- Add paramter to path in routing
		{path:'welcome/:name', component: WelcomeComponent}
	- In componet accept that parameter
		constructor(private route:ActivatedRoute) { }
		
	- If redirects from other component add parameter
		this.router.navigate(['welcome',this.username])
		

----------------------------------------------------------------------------------------
Step 20 - Create List Todos Component with ng generate

	Directive *ngFor:
	
		<tr *ngFor = "let todo of todos">
            <td>{{todo.id}}</td>
            <td>{{todo.description}}</td>
        </tr>

----------------------------------------------------------------------------------------
Step 21 - Create a Link to Todos in Welcome Component

routerlink
	You can manage your todos <a routerLink="/todos">here</a>


----------------------------------------------------------------------------------------
Step 22 - Best Practice - Create a Todo Class

In the same TS file, because is a module, create a class as best practice.
	- class import Todo
	- contructor defining members of the class

In teh front format de Date with "PIPE"
	- {{todo.targetDate | date | uppercase}}



----------------------------------------------------------------------------------------
Step 23 - Quick Introduction to Angular Modules

@NgModule --> ng for angular
Gropu of components and directives 

Difference between Angular modules and javascript modules

@NgModule:
	- declarations 	--> Components in the mopdule app
	- imports 	--> Compoents tha the app needs
	- providers 	--> Related to DI
	- boostrap 	--> Wich components will be loaded when start


Angular module shas annotation @NgModule
JS modules is any TS o JS file with code in it



----------------------------------------------------------------------------------------
Step 24 - Understanding Bootstrapping of Angular App with Root Module and Compon
	
	Bootstraing, Root Module, Root Component 

	Boostraping
		In main.ts boostrapping AppModule --> Root Module its initilized
	
	Root Module
		AppComponent it is initialized in Root Module	

	In index.html 'app-root' becomes 


----------------------------------------------------------------------------------------
Step 25 - Quick Review - Angular Modules and Components

Angular Application --> Angular Modules --> Angular Components

	Angular Component
		- Template, Style, Code

----------------------------------------------------------------------------------------

Step 26 - Overview of Next Few Steps - Bootstrap, Menu, Footer and Refactoring
	Look and feel


----------------------------------------------------------------------------------------
Step 27 - Adding Bootstrap Framework and Creating Components for Menu and Footer

Boostrap framework
	UNPKG boostrap 4
		https://unpkg.com/browse/bootstrap@4.1.0/dist/css/
		download the minified version addin the url in style.css in src folder
		
		/* You can add global styles to this file, and also import other style files */
		@import url(https://unpkg.com/browse/bootstrap@4.1.0/dist/css/bootstrap.min.css)
	
	ng generate componet
		menu
		footer

----------------------------------------------------------------------------------------
Step 28 - Using Bootstrap to Create a Menu with Navigation Links

Example of header with boostrap:

<header>
    <nav class="navbar navbar-expand-md navbar-dark bg-dark">
        <div><a href="https://www.google.com" class="navbar-brand">Google</a></div>
        
        <ul class="navbar-nav">
            <li><a href="/welcome" class="navbar-link">Home</a></li>
            <li><a href="/todos" class="navbar-link">Todos</a></li>
        </ul>

        <ul class="navbar-nav navbar-collapse justify-content-end">
            <li><a href="/login" class="navbar-link">Login</a></li>
            <li><a href="/logout" class="navbar-link">Logout</a></li>
        </ul>

    </nav>
</header>




----------------------------------------------------------------------------------------
tep 29 - Styling Footer and Other Components with CSS and B

HTML:
	<footer class="footer">
		<div class="container">
			<span class="text-muted">Rights Reserved 2020 @RamssesMeeples</span> 
		</div>
	</footer>

CSS:
	.footer {
		position: absolute;
		bottom: 0;
		width: 100%;
		height: 40px;
		background-color: #222222;
	}

Same in login, welcome and todos. With boostrap classes



----------------------------------------------------------------------------------------
Step 30 - Good Practice - Use RouterLink instead of href for Routes


	href refreesh the enitre page
	
	routerLink to internal links use always

----------------------------------------------------------------------------------------
Step 31 - Creating an Independent Authentication Service

	First separate authentication logic creating a service
	- ng generate service [name]
		ng generate service hardcordedAuthentication

		CREATE src/app/hardcoded-authentication.service.spec.ts (443 bytes)
		CREATE src/app/hardcoded-authentication.service.ts (152 bytes)
		
	Best practice is to add a fodler name "service"
		ng generate service service/[name]
		
	
	The difference to other classes is: 
	
		@Injectable({
		  providedIn: 'root'
		})


In the contructor of the componet desired inject de service.

----------------------------------------------------------------------------------------
Step 32 - Using Session Storage to Store User Authentication Token

	sessionstorage.
		setItem('key',value)
		getItem('key')

	

----------------------------------------------------------------------------------------
Step 33 - Enabling Menu Links Based on User Authentication Token
	
	*ngIf foe validate user is logged in in sessionstorage
	- Creaate member variable in component and then call the service
		
	export class MenuComponent implements OnInit {

	  isUserLoggedIn: boolean = false;

	  constructor(public hardcodedAuthenticationService
		: HardcodedAuthenticationService) { }

	  ngOnInit(): void {
		this.isUserLoggedIn = this.hardcodedAuthenticationService.isUserLoggedIn();
	  }

	}
	
	- Or directly in html 
		*ngIf="hardcodedAuthenticationService.isUserLoggedIn()"


----------------------------------------------------------------------------------------
Step 34 - Implementing Logout to remove User Authentication Token

	ng generate component logout
	
	In authentication service add a method for logout:
		logout(){
			sessionStorage.removeItem('authenticateUser')
		}
	
	And call it from the logut component 
		ngOnInit(): void {
			this.hardcodedAuthenticationService.logout();
		}

----------------------------------------------------------------------------------------
Step 35 - Securing Components using Route Guards - Part 1

	Routes activate with especific conditions
		RouteGuardService
		
		generate service:
			ng generate service service/routeGuard
			
		Implements the interface CanActive from '@angular/router'
	
	
			export class RouteGuardService implements CanActivate {

			  constructor(private hardcodedAuthenticationService: HardcodedAuthenticationService) { }

			  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
				if (this.hardcodedAuthenticationService.isUserLoggedIn())
				  return true;

				return false;
			  }

			}
			

----------------------------------------------------------------------------------------
Step 36 - Securing Components using Route Guards - Part 2

	Use the RouteGuard Service
		- Add in the Routes, multiple Guards can be added so are defined insidea an array
		  {path:'welcome/:name', component: WelcomeComponent, canActivate:[RouteGuardService]}
	In the route service redirect to login:
		canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
			if (this.hardcodedAuthenticationService.isUserLoggedIn()){
			  console.log('User is  logged in grant access')
			  return true;
			}
			console.log('User not logged access denied')
			this.router.navigate(['login']);
			return false; 
		  }


----------------------------------------------------------------------------------------
Step 37 - Quick Review - Authentication Service, Dependency Injection amd Route

	Dependency Injection with @Injectable
		- Service contain that tag when generated
		- In the contructor of the componetn where it will bne uses is declared
		
	Guards are used for grant acces to a route, for make this generates a service tha implements the CanActive Interface
		- In the rotes contant add the guard
		

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------





















