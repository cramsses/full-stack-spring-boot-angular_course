**********************  SECTIONS SIX **********************
----------------------------------------------------------------------------------------
Step 50 - Connecting Angular Frontend with Restful API 
- 1 - Creating Data Service

	Click a button in angular app that call a service in Java Springboot app
		- Create in html a button to call a method
			<button (click)="getWelcomeMessage()" class="btn btn-success" >Get Welcome Message</button> 
		- Create in componet a method that will be used in view for the button
			getWelcomeMessage(){}

	Create service in Angular to call the API Service of Java
		- ng generate service service/data/welcomeData
		- In service create a method to invoke API
	
	Use the service in the component desire with DI defining in the contructor
		- Define in contructor:
			constructor(
				private route:ActivatedRoute,
				private service:WelcomeDataService) { }
		- Use in method:
			getWelcomeMessage(){
				console.log('Calling Service Welcome');
				this.service.executeHelloWorldBeanService();
			  }
			
	
----------------------------------------------------------------------------------------
Step 51 - Connecting Angular Frontend with Restful API 
- 2 - HttpClientModule

HttpClient

	Import manually
		- import { HttpClient } from '@angular/common/http';
	Add in constructor:
		-  constructor(private http:HttpClient ) { }
		
	In app.module.ts add in import array:
		- HttpClientModule 

	
----------------------------------------------------------------------------------------
Step 52 - Connecting Angular Frontend with Restful API 
- 3 - Understanding Observsble

	Observable as the interface of asynchronus
		- Request executes until subscribe
		example: this.service.executeHelloWorldBeanService().subscribe();
		This gives an error: CORS beacuse by default SPring Boot not allows
	
	Add @CrossOrigin in controller 


----------------------------------------------------------------------------------------
Step 53 - Connecting Angular Frontend with Restful API 
- 4 - Understanding Subscribe

	Subscribe is asynchronus.
	
	So create a function ton mage the sucessful response, with an arrow function
		this.service.executeHelloWorldBeanService().subscribe(
			response => this.handleSuccessfulResponse(response)
		);

	In the data service we can define the type of th response:
	1.- Create class bean:
		export class HelloWorldBean{
		  constructor(public message:string){}
		}
	2.- Like java generics add in the get:
		 return this.http.get<HelloWorldBean>('http://uri');
		

	3.- In the Html and TS of the component define a member attribute for print in the view.
		- TS:
			this.welcomeMessageFromService = response.message;

		- HTML:
		<div class="container" *ngIf="welcomeMessageFromService">
			<h2>Your customized welcome message</h2>
			{{welcomeMessageFromService}}
		</div>
----------------------------------------------------------------------------------------
Step 54 - Connecting Angular Frontend with Restful API 
- 5 - Handlin error Response

	In the suscribe add error manage, the secon paramter is for that purpouse:
	
		this.service.executeHelloWorldBeanService().subscribe(
		  response => this.handleSuccessfulResponse(response),
		  error => this.handleErrorResponse(error)
		);

	Add funtion for handle error:
		handleErrorResponse(error) {
			console.log(error);
			console.log(error.error);
			console.log(error.error.message);
			this.welcomeMessageFromService = error.error.message;
	  }
			

----------------------------------------------------------------------------------------
Step 55 - Calling Welcome HTTP Service with Path Variables

	Acento fuerte o Backtick
		Alt + 96

	In data service in angular:
		executeHelloWorldBeanServiceWithPath(name){
			return this.http.get<HelloWorldBean>(`http://localhost:8080/hello-world-bean/path-variable/${name}`);
		  }

		getWelcomeMessageWithParameter() {
		this.service.executeHelloWorldBeanServiceWithPath(this.name).subscribe(
			response => this.handleSuccessfulResponse(response),
			error => this.handleErrorResponse(error)
			);
		}

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Step 56 - Designing RESTful services for TODO Resource

	A CRUD (Create-Retrieve-Update-Delete)

	1.- Retrieve all TODOs for a User
		GET /users/{user_name}/todos
		
	2.- Delete a TODO for a User
		DELETE /users/{user_name}/todos/{todo_id}
		
	3.- Edit a TODO
		PUT /users/{user_name}/todos/{todo_id}
	
	4.- Create a new TODO
		POST /users/{user_name}/todos/


----------------------------------------------------------------------------------------
Step 57 - Creating REST API for retrieving Todo List

	1.- Retrieve all TODOs for a User
		GET /users/{user_name}/todos

		- Create Resource and mapping the GET path in the method.
			Add tag @RestController to class
			Add tag @Autowired for inject service
			Create methdo and add tag GetMapping(path = "/users/{username}/todos")
			Call service inside the method that is mappiong for retrieve list

		- Create bussiness service class
			Add tag @Service (@Component is more generic)
			Crete method that return list (findAll())
			
----------------------------------------------------------------------------------------
Step 58 - Connecting Angular Frontend with Todo List RESTful Service

	In angular create a Data Service and method
		ng generate service service/data/todoData
		
		 constructor(
			private http:HttpClient
		  ) { }

		  retrieveAllTodos(username:string){
			return this.http.get<Todo[]>(`http://localhost:8080/users/${username}/todos`);
		  }
		
	In todo component call the subscribe and manage success response
		
		constructor(
			private todoService:TodoDataService
		) { }

		ngOnInit(): void {
			this.todoService.retrieveAllTodos('ramsses').subscribe(
			  response =>{
				console.log(response);
				this.todos = response;
			  }

			)
		}

----------------------------------------------------------------------------------------
Step 59 - Creating REST API to delete a Todo - 1 - Create DELETE Request Method

	2.- Delete a TODO for a User
		DELETE /users/{user_name}/todos/{todo_id}
		
	--- ResponseEntity ---
	Create delete method to map the uri
		@DeleteMapping(path = "/users/{user_name}/todos/{todo_id}")
			public ResponseEntity<Void> deleteTodo(
					@PathVariable String username,@PathVariable long id) {
				Todo todo = todoService.deleteById(id);
				if (todo!=null) {
					return ResponseEntity.noContent().build();
				}
				return ResponseEntity.notFound().build();
			}
	

	Create methods in service	
		deleteById
		findById

	Create hash and equals methdo in pojo Todo
	
	
----------------------------------------------------------------------------------------
Step 59 - Creating REST API to delete a Todo - 2 - Execute DELETE Request Method

	Search
		Restlet Client - REST API Testing
		(Talend API Tester - Free Edition)
		
	Test with the client
		Add in Header
			Origin  

----------------------------------------------------------------------------------------
Step 60 - Adding Delete Todo Feature to Angular Frontend

	Enhance TodoListCompoent
	
		HTML:
		<div class="alert alert-success" *ngIf='message'>{{message}}</div>
		
		<td>
			<button (click)= "deleteTodo(todo.id)" class="btn btn-warning">Delete</button>
		</td>
        
		TS:
		deleteTodo(id){
			console.log(`delete todo ${id}`);
			this.todoService.deleteTodo('ramsses',id).subscribe(
			  response => {
				console.log(response);
				this.message = `Delete of Todo ${id} Successful!`;
				this.refreshTodos();
			  }
			)
		  }
		
	Method to call delete web service in dataService
		deleteTodo(username:string, id:number){
			return this.http.delete(`http://localhost:8080/users/${username}/todos/${id}`);
		  }

----------------------------------------------------------------------------------------
Step 61 - Creating Todo Component and Handle Routing
	
	HTML:
		Add button for Update
			<td><button (click)= "updateTodo(todo.id)" class="btn btn-success">Update</button></td>
	
	TS:
		Add metod for Update
			updateTodo


	Generate componet to redirect
		ng generate component todo
	
	Add path to app-routing
		{path:'todos/:id', component: TodoComponent, canActivate:[RouteGuardService]},
	
	Add redirect in component
		updateTodo(id: number){
		  console.log(`update ${id}`);
		  this.router.navigate(['todos',id]);
		}
		

----------------------------------------------------------------------------------------
Step 62 - Designing Todo Page with Bootstrap Framework

	<h1>Todo</h1>

	<div class="container">

		<fieldset class="form-group">
			<label>Description</label>
			<input type="text" class="form-control" name="description" required="required" />
		</fieldset>

		<fieldset class="form-group">
			<label>Target Date</label>
			<input type="date" class="form-control" name="targetDate" required="required" />
		</fieldset>

		<button class="btn btn-success" (click)="saveTodo()">Save</button>


	</div>


----------------------------------------------------------------------------------------
Step 63 - Creating Retrieve Todo Service and Connect Angular Frontend

	Create Service backend method
			@GetMapping(path = "/users/{username}/todos/{id}")
			public Todo getTodo(@PathVariable String username,@PathVariable long id){
				return todoService.finById(id);
			}
		
	Add call to  service in DataService in Angular service
		retrieveTodo(username:string, id:number){
			return this.http.get<Todo>(`http://localhost:8080/users/${username}/todos/${id}`);
		  }

	Call service in component adding DataService and ActivatedRoute to get parameter
		ngOnInit(): void {
			this.id = this.route.snapshot.params['id'];
			console.log('id = '+this.id)
			this.todoService.retrieveTodo('ramsses', this.id)
			.subscribe(
			  
			  data => {
				this.todo = data;
			  }
			)
		  }

	Two way data binding in HTML with [(ngModel)]
		[(ngModel)]="todo.description"

----------------------------------------------------------------------------------------
Step 64 - Improve Todo Page Appearance

	Fix the error:
		"ERROR TypeError: Cannot read property 'description' of undefined"
		This is because the Todo object is null
	Initialize:
		this.todo = new Todo(1,'',false,new Date());

	Date format with pipe and separaate two way binding:
		<fieldset class="form-group">
			<label>Target Date</label>
			<input type="date" 
			[ngModel]="todo.targetDate | date:'yyyy-MM-dd' " 
			(ngModelChange)="todo.targetDate = $event "
			class="form-control" name="targetDate" required="required" />
		</fieldset>
		
	
----------------------------------------------------------------------------------------
Step 65 - Creating REST API for Updating Todo - PUT Request Method

	In TodoHarcodedService add methdo to save/update:
			public Todo save(Todo todo) {
				if(todo.getId() ==-1) {
					//Insert
					todo.setId(++idCounter);
					todos.add(todo);
				}else {
					//Update
					deleteById(todo.getId());
					todos.add(todo);
				}
				return todo;
			}
			
	3.- Edit a TODO
		PUT /users/{user_name}/todos/{todo_id}
		
			@PutMapping(path = "/users/{username}/todos/{id}")
			public ResponseEntity<Todo> updateTodo(
					@PathVariable String username,
					@PathVariable long id, 
					@RequestBody Todo todo) {
				Todo todoUpdated = todoService.save(todo);
				return new ResponseEntity<Todo>(todo, HttpStatus.OK);
			}
	
	




----------------------------------------------------------------------------------------
Step 66 - 1 - Creating REST API for Creating a Todo - POST Request Method

	4.- Create a new TODO
		POST /users/{user_name}/todos/
		
		In TodoHarcodedService :
		
			public Todo save(Todo todo) {
				if(todo.getId() ==-1 || todo.getId() == 0) {
					//Insert
					todo.setId(++idCounter);
					todos.add(todo);
				}else {
					//Update
					deleteById(todo.getId());
					todos.add(todo);
				}
				return todo;
			}

		In Controller:
		
			@PostMapping(path = "/users/{username}/todos")
			public ResponseEntity<Void> updateTodo(
					@PathVariable String username,
					@RequestBody Todo todo) {
				
				Todo createdTodo = todoService.save(todo);
				//Location
				//Get current resource url
				// /users/{username}/todos/{id}
				
				URI uri = ServletUriComponentsBuilder.fromCurrentRequest()
					.path("/{id}").buildAndExpand(createdTodo.getId()).toUri();
				
				return ResponseEntity.created(uri).build();
			}
		
		


----------------------------------------------------------------------------------------
Step 66 - 2 - RESTful Web Services - Best Practices

	Consumer First
		Think of Consumer
		Name of resources
		Great Documentation(Swagger)

	Make Best use of HttpClient
		Request methods
			GET
			POST
			PUT
			DELETE
			
		Response Status
			200 - SUCCESS
			404 - RESOURCE NOT FOUND 
			400 - BAD REQUEST
			201 - CREATED
			401 - UNAUTHORIZED
			500 - SERVER ERROR
	
	No secure info in URI
		
	Use plurals
		Prefer /users to /user
		Prefer /users/1 to /user/1

	Use NOUNS for Resources
	
	For Exceptions
		Define a consistent approach
			- /searh
			


----------------------------------------------------------------------------------------
Step 67 - Implementing Update Todo Feature in Angular Frontend

	In dataService add method to call WS:
		updateTodo(username:string, id:number,todo:Todo){
			return this.http.put(
			  `http://localhost:8080/users/${username}/todos/${id}`
			  ,todo);
		  }

	In component add saveMethod wirh redirect --> router.navigate():
		  saveTodo(){
			this.todoService.updateTodo('ramsses',this.id,this.todo).subscribe(
			  data => {
				console.log(data);
				this.router.navigate(['/todos'])
			  }
			);
		  }

----------------------------------------------------------------------------------------
Step 68 - Implementing New Todo Feature in Angular Frontend

	Add button to add:
		<div class="row">
			<button (click)= "addTodo()" class="btn btn-success">Add</button>
		</div>

	Add methoD to redirect:
		addTodo(){
		  console.log(`Create new Todo`); 
		  this.router.navigate(['todos',-1]);
		}
		
	Add call to WS in angular data service:	
		createTodo(username:string,todo:Todo){
			return this.http.post(
			  `http://localhost:8080/users/${username}/todos`
			  ,todo);
		  }
	
	Call service in save method:
		saveTodo(){
			if(this.id===-1){
			  // Create
			  this.todoService.createTodo('ramsses',this.todo).subscribe(
				data => {
				  console.log(data);
				  this.router.navigate(['/todos'])
				}
			  );
			}else{
			  // Update
			  this.todoService.updateTodo('ramsses',this.id,this.todo).subscribe(
				data => {
				  console.log(data);
				  this.router.navigate(['/todos'])
				}
			  );
			}
		}


----------------------------------------------------------------------------------------
Step 69 - Improving Todo Form - Validation and Form Submit on Enter -ngSubmit

	
	
	Sumbit on Enter
		There is no Form in previous components HTMLs
		
		1.- Add from tag in html to provide submit on Enter
		
		2.- Chnage clik event in button to submit event in form
			Remove in button:
				(click)="saveTodo()"
			Add in button:
				type="submit"
			Add in form:
				(ngSubmit)="saveTodo()"
		
			
	Basic Validations
		Template variable
		
		<form (ngSubmit)="!todoForm.invalid && saveTodo()" #todoForm="ngForm">
		
		required and minlegth are some validations 
		
	
----------------------------------------------------------------------------------------
Step 70 - Enhancing Validation Messages on Todo Page

	On CSS component:
		.ng-invalid:not(form){
			border-left: 5px solid red;
		}

	In HTML map with #temporalVariable:
	    <div class="alert alert-warning" *ngIf="todoForm.dirty && todoForm.invalid">Enter valid values </div>
		<div class="alert alert-warning" *ngIf="todoForm.dirty && targetDate.invalid">Enter valid target date </div>
		<div class="alert alert-warning" *ngIf="todoForm.dirty && description.invalid">Enter at least 5 chars </div>


		<form (ngSubmit)="!todoForm.invalid && saveTodo()" #todoForm="ngForm">
		
			<fieldset class="form-group">
				<label>Description</label>
				<input type="text"  #description="ngModel" 
				[(ngModel)]="todo.description" class="form-control" name="description" required="required" minlength="5" />
			</fieldset>
		
			<fieldset class="form-group">
				<label>Target Date</label>
				<input type="date" #targetDate="ngModel"
				[ngModel]="todo.targetDate | date:'yyyy-MM-dd' " 
				(ngModelChange)="todo.targetDate = $event "
				class="form-control" name="targetDate" required="required" />
			</fieldset>
		
			<button type="submit" class="btn btn-success" >Save</button>

		</form>
	


----------------------------------------------------------------------------------------



