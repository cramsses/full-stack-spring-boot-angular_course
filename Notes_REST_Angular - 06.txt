**********************  SECTIONS SIX **********************
----------------------------------------------------------------------------------------
Step 50 - Connecting Angular Frontend with Restful API 
- 1 - Creating Data Service

	Click a button in angular app that call a service in Java Springboot app
		- Create in html a button to call a method
			<button (click)="getWelcomeMessage()" class="btn btn-success" >Get Welcome Message</button> 
		- Create in componet a method that will be used in view for the button
			getWelcomeMessage(){}

	Create service in Angular to call the API Service of Java
		- ng generate service service/data/welcomeData
		- In service create a method to invoke API
	
	Use the service in the component desire with DI defining in the contructor
		- Define in contructor:
			constructor(
				private route:ActivatedRoute,
				private service:WelcomeDataService) { }
		- Use in method:
			getWelcomeMessage(){
				console.log('Calling Service Welcome');
				this.service.executeHelloWorldBeanService();
			  }
			
	
----------------------------------------------------------------------------------------
Step 51 - Connecting Angular Frontend with Restful API 
- 2 - HttpClientModule

HttpClient

	Import manually
		- import { HttpClient } from '@angular/common/http';
	Add in constructor:
		-  constructor(private http:HttpClient ) { }
		
	In app.module.ts add in import array:
		- HttpClientModule 

	
----------------------------------------------------------------------------------------
Step 52 - Connecting Angular Frontend with Restful API 
- 3 - Understanding Observsble

	Observable as the interface of asynchronus
		- Request executes until subscribe
		example: this.service.executeHelloWorldBeanService().subscribe();
		This gives an error: CORS beacuse by default SPring Boot not allows
	
	Add @CrossOrigin in controller 


----------------------------------------------------------------------------------------
Step 53 - Connecting Angular Frontend with Restful API 
- 4 - Understanding Subscribe

	Subscribe is asynchronus.
	
	So create a function ton mage the sucessful response, with an arrow function
		this.service.executeHelloWorldBeanService().subscribe(
			response => this.handleSuccessfulResponse(response)
		);

	In the data service we can define the type of th response:
	1.- Create class bean:
		export class HelloWorldBean{
		  constructor(public message:string){}
		}
	2.- Like java generics add in the get:
		 return this.http.get<HelloWorldBean>('http://uri');
		

	3.- In the Html and TS of the component define a member attribute for print in the view.
		- TS:
			this.welcomeMessageFromService = response.message;

		- HTML:
		<div class="container" *ngIf="welcomeMessageFromService">
			<h2>Your customized welcome message</h2>
			{{welcomeMessageFromService}}
		</div>
----------------------------------------------------------------------------------------
Step 54 - Connecting Angular Frontend with Restful API 
- 5 - Handlin error Response

	In the suscribe add error manage, the secon paramter is for that purpouse:
	
		this.service.executeHelloWorldBeanService().subscribe(
		  response => this.handleSuccessfulResponse(response),
		  error => this.handleErrorResponse(error)
		);

	Add funtion for handle error:
		handleErrorResponse(error) {
			console.log(error);
			console.log(error.error);
			console.log(error.error.message);
			this.welcomeMessageFromService = error.error.message;
	  }
			

----------------------------------------------------------------------------------------
Step 55 - Calling Welcome HTTP Service with Path Variables



----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------



