**********************  SECTIONS FOUR**********************
----------------------------------------------------------------------------------------
Step 41 - What is a Web Service?
	
	W3C 
		Software system designed to support interoperable 
		machine-to-machine interaction over a network
		
		1.- machine-to-machine interaction
		2.- interoperable - not platform dependent
		3.- Over a network
	
----------------------------------------------------------------------------------------
Step 42 -  Important How Questions related to Web Services

	How?
		Request <->Response
	
	Exchange Formats
		XML		->eXtended Markup Language
		JSON	->JS Object Notation
	
	Service Definition
		Request/Response format	--> JSON/XML
		Request Structure		--> How create a request
		Response Structure		--> How it is the structure of response
		Endpoint				--> How to call the service
	
----------------------------------------------------------------------------------------
Step 43 - Web Services - Key Terminology

	Request/Response
		Request 	--> Input
		Response	--> Output
	Message Exchange Format
		XML or JSON

	Service Provider 	--> Server
	Service Consumer	--> Client
	
	Service Definition	--> Contract
	
	Transport --> Expose over what
		HTTP
		MQ	--> Message Quee


----------------------------------------------------------------------------------------
Step 44 - Introduction to RESTful Web Services

	REST 	--> REpresentational State Transfer
			--> Over HTTP
			--> Make best use of HTTP
			
	HTTP
		- Request HEADER and BODY
		- Methods		(GET, POST, DELETE,PUT
						GET		Get
						POST	Create
						PUT		Update
						DELETE	Delete
						
		- Status Code	(200, 404, ....)
						200 Successful
						404 Not Found
						

	Resource
		- URI
			/user/Ram/todos/1
			/user/Ram/todos
			/user/Ram
		- Representations
			XML
			HTML
			JSON
			
	REST
		Exchange Format
			No Restriction, JSON is popular
		Transport
			HTTP only
		Service Definition
			No Standard. WASL/Swagger/...
			
----------------------------------------------------------------------------------------


**********************  SECTIONS FIVE **********************

Install Java JDK
	Download Java JDK
	Follow Wizard
	Check in command/terminal 
		java -version
		
Install Eclipse
	Download Eclipse
		https://www.eclipse.org/downloads/
	
Meven test with SpringBoot 
	start.spring.io
		- generate
		- unzip
		- import existign maven project in eclipse
		- 

----------------------------------------------------------------------------------------
 Step 45 - Initializing a RESTful Services Project with Spring Boot

	start.spring.io
		- meven
		- java
		- spring boot
		
		- Group 	--> Like Package
		- Artifact	--> Like Class Name

		- Dependencies
			- Web
			- DevTools
			- JPA
			- H2
			
		Generate 
		
	Eclipse
		File --> import
			Existing Maven projects
			
		Run as java application
			

----------------------------------------------------------------------------------------
Step 46 - Creating a Hello World Service

	Create a simple controller
		-Define as a restcontroller
		
		Create a method
			Define http method - GET
			Define URI
			
		//Controller
		@RestController
		public class HelloWorldController {
			
			
			//GET
			//URI - /hello-world
			//method
			@RequestMapping(method = RequestMethod.GET,path = "/hello-world")
			public String helloWorld() {
				return "Hello World";
			}
			

		}





----------------------------------------------------------------------------------------
Step 47 - Enhancing the Hello World Service to return a Bean


	Create a new method
		And return Object HelloWorld
	
	Create the bean class HelloWorld
	
	
	Note: if the bean has not a getter there will be an error of "No converter found"
			The retunr will be auomatic converted to JSON
			
	
----------------------------------------------------------------------------------------
Step 48 - Quick Review of Spring Boot Auto Configuration and Dispatcher Servlet

	Springboot autoconfiguration is responsible for configuration

	Debug mode
		- In application.properties
			logging.level.org.springframework = debug

	In debug in the console log:
	
	
		--- DISPATCHERSERVLET ---
		DispatcherServletAutoConfiguration matched:
			- @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
			- found 'session' scope (OnWebApplicationCondition)


		--- ERROR CONF ---
		ErrorMvcAutoConfiguration matched:
			- @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
			- found 'session' scope (OnWebApplicationCondition)
		
		ErrorMvcAutoConfiguration#basicErrorController matched:
			- @ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorController; SearchStrategy: current) did not find any beans (OnBeanCondition)
		
		ErrorMvcAutoConfiguration#errorAttributes matched:
			- @ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorAttributes; SearchStrategy: current) did not find any beans (OnBeanCondition)
		
		ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration#conventionErrorViewResolver matched:
			- @ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'; @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.servlet.error.ErrorViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)
		
		ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration matched:
			- @ConditionalOnProperty (server.error.whitelabel.enabled) matched (OnPropertyCondition)
			- ErrorTemplate Missing did not find error template view (ErrorMvcAutoConfiguration.ErrorTemplateMissingCondition)

		
		--- HTTPMESSAGECONVERTER ---
		HttpMessageConvertersAutoConfiguration matched:
			- @ConditionalOnClass found required class 'org.springframework.http.converter.HttpMessageConverter' (OnClassCondition)
			- NoneNestedConditions 0 matched 1 did not; NestedCondition on HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition.ReactiveWebApplication did not find reactive web application classes (HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition)

		--- JACKSON ---
		JacksonAutoConfiguration matched:
			- @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper' (OnClassCondition)



		[/] DispatcherServlet is handling all the requests 

----------------------------------------------------------------------------------------

Step 49 - Enhancing the Hello World Service with a Path Variable


	In the path add the variable
		@GetMapping(path = "/hello-world-bean/path-variable/{name}")
	
	In the paramater add @PathVar
		public HelloWorldBean helloWorldPathVariable(@PathVariable String name)

